package com.natthasethstudio.sethpos.util

import android.content.Context
import android.content.SharedPreferences
import android.graphics.drawable.AnimatedVectorDrawable
import android.graphics.drawable.Drawable
import android.util.Log
import androidx.core.content.ContextCompat
import com.natthasethstudio.sethpos.R

class ProfileBackgroundManager(private val context: Context) {
    
    companion object {
        private const val PREFS_NAME = "profile_background_prefs"
        private const val KEY_BACKGROUND_ID = "background_id"
        private const val KEY_USER_ID = "user_id"
    }
    
    private val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ animation
    private val backgroundDrawables = listOf(
        R.drawable.bg_profile_mountain_animated, // ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤
        R.drawable.bg_profile_city_animated,     // ‡πÄ‡∏°‡∏∑‡∏≠‡∏á
        R.drawable.bg_profile_sea_animated       // ‡∏ó‡∏∞‡πÄ‡∏•
    )
    
    /**
     * ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
     */
    fun getBackgroundForUser(userId: String): Drawable? {
        try {
            val savedUserId = prefs.getString(KEY_USER_ID, null)
            val savedBackgroundId = prefs.getInt(KEY_BACKGROUND_ID, -1)
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà
            if (savedUserId != userId || savedBackgroundId == -1) {
                val randomBackgroundId = backgroundDrawables.random()
                saveBackgroundForUser(userId, randomBackgroundId)
                Log.d("ProfileBackgroundManager", "‡∏™‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà: $randomBackgroundId")
                return try {
                    ContextCompat.getDrawable(context, randomBackgroundId)
                } catch (e: Exception) {
                    Log.e("ProfileBackgroundManager", "Error loading random background: "+e.message)
                    // Fallback to mountain background
                    ContextCompat.getDrawable(context, R.drawable.bg_profile_mountain_animated)
                }
            }
            
            // ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            Log.d("ProfileBackgroundManager", "‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏°: $savedBackgroundId")
            return try {
                ContextCompat.getDrawable(context, savedBackgroundId)
            } catch (e: Exception) {
                Log.e("ProfileBackgroundManager", "Error loading saved background: ${e.message}")
                // Fallback to mountain background
                ContextCompat.getDrawable(context, R.drawable.bg_profile_mountain_animated)
            }
        } catch (e: Exception) {
            Log.e("ProfileBackgroundManager", "Error in getBackgroundForUser: ${e.message}")
            // Ultimate fallback
            return try {
                ContextCompat.getDrawable(context, R.drawable.bg_profile_mountain_animated)
            } catch (e2: Exception) {
                Log.e("ProfileBackgroundManager", "Error loading fallback background: ${e2.message}")
                null
            }
        }
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     */
    private fun saveBackgroundForUser(userId: String, backgroundId: Int) {
        prefs.edit()
            .putString(KEY_USER_ID, userId)
            .putInt(KEY_BACKGROUND_ID, backgroundId)
            .apply()
        Log.d("ProfileBackgroundManager", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á: $backgroundId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user: $userId")
    }
    
    /**
     * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
     */
    fun changeBackground(userId: String): Drawable? {
        try {
            Log.d("ProfileBackgroundManager", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User: $userId")
            val randomBackgroundId = backgroundDrawables.random()
            Log.d("ProfileBackgroundManager", "‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ Background ID: $randomBackgroundId")
            saveBackgroundForUser(userId, randomBackgroundId)
            val drawable = try {
                ContextCompat.getDrawable(context, randomBackgroundId)
            } catch (e: Exception) {
                Log.e("ProfileBackgroundManager", "Error loading new background: ${e.message}")
                // Fallback to mountain background
                ContextCompat.getDrawable(context, R.drawable.bg_profile_mountain_animated)
            }
            Log.d("ProfileBackgroundManager", "‡πÑ‡∏î‡πâ Drawable: ${drawable != null}")
            return drawable
        } catch (e: Exception) {
            Log.e("ProfileBackgroundManager", "Error in changeBackground: ${e.message}")
            // Ultimate fallback
            return try {
                ContextCompat.getDrawable(context, R.drawable.bg_profile_mountain_animated)
            } catch (e2: Exception) {
                Log.e("ProfileBackgroundManager", "Error loading fallback background: ${e2.message}")
                null
            }
        }
    }
    
    /**
     * ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ID
     */
    fun getLocationName(backgroundId: Int): String {
        return when (backgroundId) {
            R.drawable.bg_profile_simple_animated -> "üé¨ ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏°‡∏µ Animation)"
            R.drawable.bg_profile_simple -> "üé® ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÑ‡∏°‡πà‡∏°‡∏µ Animation)"
            R.drawable.bg_profile_paris -> "üóº ‡∏õ‡∏≤‡∏£‡∏µ‡∏™, ‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™"
            R.drawable.bg_profile_tokyo -> "üóæ ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß, ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô"
            R.drawable.bg_profile_santorini -> "üèõÔ∏è ‡∏ã‡∏≤‡∏ô‡πÇ‡∏ï‡∏£‡∏¥‡∏ô‡∏µ, ‡∏Å‡∏£‡∏µ‡∏ã"
            R.drawable.bg_profile_swiss -> "üèîÔ∏è ‡∏™‡∏ß‡∏¥‡∏ï‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏ô‡∏î‡πå"
            R.drawable.bg_profile_venice -> "üõ∂ ‡πÄ‡∏ß‡∏ô‡∏¥‡∏™, ‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ"
            else -> "üåç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö"
        }
    }
    
    /**
     * ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Drawable
     */
    fun getLocationNameFromDrawable(drawable: Drawable?): String {
        val savedBackgroundId = prefs.getInt(KEY_BACKGROUND_ID, -1)
        return getLocationName(savedBackgroundId)
    }
    
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏° animation ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
     */
    fun startBackgroundAnimation(drawable: Drawable?) {
        Log.d("ProfileBackgroundManager", "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏° animation: ${drawable != null}")
        if (drawable is AnimatedVectorDrawable) {
            try {
                Log.d("ProfileBackgroundManager", "‡πÄ‡∏£‡∏¥‡πà‡∏° AnimatedVectorDrawable")
                drawable.start()
                Log.d("ProfileBackgroundManager", "‡πÄ‡∏£‡∏¥‡πà‡∏° animation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            } catch (e: Exception) {
                Log.e("ProfileBackgroundManager", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° animation: ${e.message}")
            }
        } else {
            Log.d("ProfileBackgroundManager", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà AnimatedVectorDrawable: ${drawable?.javaClass?.simpleName}")
        }
    }
    
    /**
     * ‡∏´‡∏¢‡∏∏‡∏î animation ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
     */
    fun stopBackgroundAnimation(drawable: Drawable?) {
        if (drawable is AnimatedVectorDrawable) {
            try {
                drawable.stop()
            } catch (e: Exception) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î animation ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
            }
        }
    }
} 